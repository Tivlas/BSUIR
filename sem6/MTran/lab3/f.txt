package main

type summer interface {
    sum(nums []int) int;
}

type Emb struct {
    a, b int
    str string
}

type MyFunc func(int) int

type calculator struct {
    Emb
    Function MyFunc
}

func (c *calculator) sum(sl []int) (s int) {
    for _, val := range sl {
        s += val
    }
    return
}

func min(a, b int) int {
    return a + b
}

func main() {
    a := 4
    a := 5
    b := max(a, a)

    for i := 10; i < 20; i++ {
        a++
    }

    for {
        a = a + 3
    }

    for b < 3 {
        b = 5
    }

    var sl []int = []int{1,2,      3}
    for i, val := range sl {
        val++
    }  

    mp := make(map[int]string, 2)
    if val, ok := mp[10]; ok {
        a += val
        if val > a {
            b++
        }
    }

    grade := 'B'

    switch grade {
    case 'A':
        fmt.Println("Excellent!")
    case 'B':
        fmt.Println("Very good!")
    case 'C':
        fmt.Println("Good!")
    default:
        fmt.Println("Keep trying!")
    }

    var value interface{} = 42

    switch v := value.(type) {
    case int:
        fmt.Println("value is an int:", v)
    case string:
        fmt.Println("value is a string:", v)
    case bool:
        fmt.Println("value is a bool:", v)
    default:
        fmt.Println("unknown type:", v)
    }
}