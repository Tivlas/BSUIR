package main


func printValue[T ~int16](value T) {
	fmt.Printf("Value %d", value)
}

func printValue[T int16](value T) {
	fmt.Printf("Value %d", value)
}

type Number interface {
  int | float32 | float64
  IsEven() bool 
}

func GMin[T constraints.Ordered](x, y T) T {
    if x < y {
        return x
    }
    return y
}  

func Scale[S ~[]E, E constraints.Integer](s S, c E) S {
    r := make(S, len(s))
    for i, v := range s {
        r[i] = v * c
    }
    return r
}

type summer interface {
    sum(nums []int) int;
}

type Emb struct {
    a, b int
    str string
}

type MyFunc func(int) int

type calculator struct {
    Emb
    Function MyFunc
}

func (c *calculator) sum(sl []int) (s int) {
    for _, val := range sl {
        s += val
    }
    return
}

func min(a, b int) int {
    return a + b
}

const Pi = 3.14159

const (
    E       = 2.71828
    MaxInt  = int64(^uint64(0) >> 1)
    MinInt  = -MaxInt - 1
    MaxUint = ^uint64(0)
)

const (
    Sunday = iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
)

func main() {
    a := 4
    a := 5
    b := max(a, a)

    for i := 10; i < 20; i++ {
        a++
    }

    for {
        a = a + 3
    }

    for b < 3 {
        b = 5
    }

    var sl []int = []int{1,2,      3}
    for i, val := range sl {
        val++
    }  

    mp := make(map[int]string, 2)
    if val, ok := mp[10]; ok {
        a += val
        if val > a {
            b++
        }
    }

    grade := 'B'

    switch grade {
    case 'A':
        fmt.Println("Excellent!")
    case 'B':
        fmt.Println("Very good!")
    case 'C':
        fmt.Println("Good!")
    default:
        fmt.Println("Keep trying!")
    }

    var value interface{} = 42

    switch v := value.(type) {
    case int:
        fmt.Println("value is an int:", v)
    case string:
        fmt.Println("value is a string:", v)
    case bool:
        fmt.Println("value is a bool:", v)
    default:
        fmt.Println("unknown type:", v)
    }

    type Person struct {
        Name string
        Age  int
    }

	var value interface{} = Person{"Alice", 30}

    if person, ok := value.(Person); ok {
        fmt.Println("Name:", person.Name)
        fmt.Println("Age:", person.Age)
    } else {
        fmt.Println("value is not a Person")
    }

    var person Person = Person{
        Name: "Alice",
        Age:  30,
    }

    a = b
    a++
    a == b
    
    const cnt := 123

	const a int = 3
}

