@page "/fetchdata"
@using Domain.Entities;
@using Domain.Models;
@using System.Text.Json;
@inject HttpClient Http

<PageTitle>Clothes</PageTitle>

<h1>Clothes list</h1>

@if (clothes == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Description</th>
				<th>Price</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var cl in clothes!.Data!.Items)
			{
				<tr>
					<td>@cl.Name</td>
					<td>@cl.Description</td>
					<td>@cl.Price</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private ResponseData<ListModel<Clothes>>? clothes;

	protected override async Task OnInitializedAsync()
	{
		var response = await Http.GetAsync($"{Http.BaseAddress}/Clothes/");
		var jsonSerializerOptions = new JsonSerializerOptions()
			{
				PropertyNamingPolicy = JsonNamingPolicy.CamelCase
			};
		clothes = await response.Content.ReadFromJsonAsync<ResponseData<ListModel<Clothes>>>(jsonSerializerOptions);
	}
}
